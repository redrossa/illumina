{"version":3,"sources":["logo.svg","components/Navbar.js","components/NavItem.js","pages/HomePage.js","pages/AboutPage.js","images/app-background.svg","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","children","NavItem","style","float","position","exact","activeClassName","to","image_upload_png","input","document","getElementById","label","output","path","value","file","files","innerText","Tesseract","recognize","logger","m","console","log","then","text","data","HomePage","id","type","accept","onChange","AboutPage","App","component","src","background","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qRAAe,I,mCCEA,SAASA,EAAOC,GAC7B,OACI,oBAAIC,UAAU,SAAd,SACGD,EAAME,W,MCDA,SAASC,EAAQH,GAC9B,OACI,oBAAIC,UAAU,WAAWG,MAAO,CAACC,MAAOL,EAAMM,UAA9C,SACE,cAAC,IAAD,CAASC,MAAOP,EAAMO,MAAOC,gBAAiBR,EAAMQ,gBAAiBC,GAAIT,EAAMS,GAA/E,SACGT,EAAME,a,iCCJjB,SAASQ,IACP,IAAMC,EAAQC,SAASC,eAAe,eAChCC,EAAQF,SAASC,eAAe,qBAEhCE,GADSH,SAASC,eAAe,gBACxBD,SAASC,eAAe,iBACjCG,EAAOL,EAAMM,MACbC,EAAOP,EAAMQ,MAAM,GAEzBL,EAAMM,UAAYJ,EAElBK,IAAUC,UACNJ,EACA,MACA,CAACK,OAAQ,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,MAC5BG,MAAK,YAAqB,IAAZC,EAAW,EAAlBC,KAAOD,KACdb,EAAOK,UAAYQ,KAqDR,SAASE,IAEtB,OACI,sBAAK7B,UAAU,OAAO8B,GAAG,OAAzB,UACE,0CACA,+DACA,sBAAK9B,UAAU,UAAf,UACE,sBAAKA,UAAU,wBAAf,UACE,uBAAO8B,GAAG,oBAAV,4DACA,uBAAOC,KAAK,OAAOD,GAAG,cAAcE,OAAO,kBAAkBC,SAAUxB,IACvE,wBAAQqB,GAAG,oBAEb,qBAAKA,GAAG,eAAe9B,UAAU,iC,OClF5B,SAASkC,IACtB,OACI,sBAAKlC,UAAU,OAAO8B,GAAG,QAAzB,UACE,gDACA,yTAKA,mhBCXO,UAA0B,2CCiC1BK,MAxBf,WACE,OACI,cAAC,IAAD,UACE,qBAAKnC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,eAAC,EAAD,WACE,cAAC,EAAD,CAASO,gBAAgB,SAASD,OAAK,EAACE,GAAG,IAAIH,SAAS,OAAxD,kBACA,cAAC,EAAD,CAASE,gBAAgB,SAASC,GAAG,SAASH,SAAS,QAAvD,sBAEF,qBAAKL,UAAU,UAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOM,OAAK,EAACS,KAAK,IAAIqB,UAAWP,IACjC,cAAC,IAAD,CAAOd,KAAK,SAASqB,UAAWF,SAGpC,qBAAKlC,UAAU,uBAAf,SACE,qBAAKA,UAAU,aAAaqC,IAAKC,cCbhCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtC,SAASC,eAAe,SAM1B2B,K","file":"static/js/main.91addf30.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import '../styles/Navbar.css'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n      <ul className='navbar'>\r\n        {props.children}\r\n      </ul>\r\n  );\r\n}\r\n","import '../styles/NavItem.css'\r\n\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport default function NavItem(props) {\r\n  return (\r\n      <li className='nav-item' style={{float: props.position}}>\r\n        <NavLink exact={props.exact} activeClassName={props.activeClassName} to={props.to}>\r\n          {props.children}\r\n        </NavLink>\r\n      </li>\r\n  );\r\n}","import '../styles/HomePage.css';\r\nimport Tesseract from 'tesseract.js';\r\nimport * as pdfjsLib from 'pdfjs-dist';\r\n\r\nfunction image_upload_png() {\r\n  const input = document.getElementById(\"image-input\");\r\n  const label = document.getElementById(\"image-input-label\");\r\n  const canvas = document.getElementById(\"image-canvas\");\r\n  const output = document.getElementById(\"image-output\");\r\n  const path = input.value;\r\n  const file = input.files[0];\r\n\r\n  label.innerText = path;\r\n\r\n  Tesseract.recognize(\r\n      file,\r\n      'eng',\r\n      {logger: m => console.log(m)}\r\n  ).then(({data: {text}}) => {\r\n    output.innerText = text;\r\n  });\r\n}\r\n\r\nfunction image_upload_pdf() {\r\n  const input = document.getElementById(\"image-input\");\r\n  const label = document.getElementById(\"image-input-label\");\r\n  const canvas = document.getElementById(\"image-canvas\");\r\n  const output = document.getElementById(\"image-output\");\r\n  const path = input.value;\r\n  const file = input.files[0];\r\n  const reader = new FileReader();\r\n  const context = canvas.getContext('2d');\r\n\r\n  label.innerText = path;\r\n\r\n  reader.onload = function () {\r\n    const array = new Uint8Array(this.result);\r\n    const loadingTask = pdfjsLib.getDocument(array);\r\n\r\n    loadingTask.promise.then(pdf => {\r\n      pdf.getPage(1).then(function (page) {\r\n        const scale = 1.5;\r\n        const viewport = page.getViewport({scale: scale});\r\n\r\n        // Prepare canvas using PDF page dimensions\r\n        canvas.height = viewport.height;\r\n        canvas.width = viewport.width;\r\n\r\n        const renderContext = {\r\n          canvasContext: context,\r\n          viewport: viewport\r\n        };\r\n\r\n        var renderTask = page.render(renderContext);\r\n        renderTask.promise.then(function () {\r\n          console.log('Page rendered');\r\n        });\r\n      })\r\n    }, function (reason) {\r\n      console.error(reason);\r\n    });\r\n\r\n    Tesseract.recognize(\r\n        canvas,\r\n        'eng',\r\n        {logger: m => console.log(m)}\r\n    ).then(({data: {text}}) => {\r\n      output.innerText = text;\r\n    });\r\n  }\r\n}\r\n\r\nexport default function HomePage() {\r\n\r\n  return (\r\n      <div className=\"page\" id=\"home\">\r\n        <h1>Illumina</h1>\r\n        <h2>Textbook image-to-text Reader</h2>\r\n        <div className=\"scanner\">\r\n          <div className=\"image-input-container\">\r\n            <label id=\"image-input-label\">Click here to search or drop an image to start</label>\r\n            <input type=\"file\" id=\"image-input\" accept=\"application/png\" onChange={image_upload_png}/>\r\n            <canvas id=\"image-canvas\"/>\r\n          </div>\r\n          <div id=\"image-output\" className=\"image-output-container\">\r\n\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}","import '../styles/About.css'\r\n\r\nexport default function AboutPage() {\r\n  return (\r\n      <div className=\"page\" id=\"about\">\r\n        <h1>About Illumina</h1>\r\n        <p>\r\n          This project was developed by Reno Raksi, Minyi Lin, Richard Hu, and Zach Shumway for the UW-Madison\r\n          Cheesehacks 2021. After several hours brainstorming what to do, changing ideas, and redoing work,\r\n          even working on two ideas simultaneously, we finally arrived at this masterpiece.\r\n        </p>\r\n        <p>\r\n          Illumina is an image-to-text scanner aimed for processing PNG files from scanned Textbooks so\r\n          students can highlight and perform word-searches on them. The frontend is built in React, and\r\n          the image processing is performed using Tesseract.js all client-side. At the moment, it only\r\n          accepts one PNG input file at a time, but we are interested in developing this further in our\r\n          own time. For future goals, we would like also accept PDF input format, as well as input a\r\n          document with multiple pages.\r\n        </p>\r\n      </div>\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/app-background.f5ef2627.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Navbar from \"./components/Navbar\";\nimport NavItem from \"./components/NavItem\";\nimport HomePage from \"./pages/HomePage\";\nimport AboutPage from \"./pages/AboutPage\";\nimport background from \"./images/app-background.svg\"\n\nfunction App() {\n  return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <Navbar>\n              <NavItem activeClassName='active' exact to='/' position='left'>Home</NavItem>\n              <NavItem activeClassName='active' to='/about' position='right'>About</NavItem>\n            </Navbar>\n            <div className='content'>\n              <Switch>\n                <Route exact path='/' component={HomePage}/>\n                <Route path='/about' component={AboutPage}/>\n              </Switch>\n            </div>\n            <div className='background-container'>\n              <img className='background' src={background}/>\n            </div>\n          </header>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}